# กำหนดเวอร์ชั่นของ Docker Compose
version: '3.8'

# กำหนด Services หรือ Containers ที่จะรัน
services:
  # Service ของ Backend API
  api:
    # สั่งให้ build image จาก Dockerfile ที่อยู่ในโฟลเดอร์ ./api
    build:
      context: ./api
      dockerfile: Dockerfile
    # ตั้งชื่อ container เพื่อให้ง่ายต่อการจัดการ
    container_name: icrud_api
    # Restart container อัตโนมัติหากเกิดข้อผิดพลาด
    restart: unless-stopped
    # กำหนด Port Mapping จาก port 3000 ของ Host ไปยัง port 3000 ของ Container
    ports:
      - "3000:3000"
    # กำหนด Environment Variables
    environment:
      # DATABASE_URL จะต้องชี้ไปที่ service 'db' ของ PostgreSQL
      # รูปแบบ: postgresql://USER:PASSWORD@HOST:PORT/DB_NAME
      - DATABASE_URL=${DATABASE_URL}
      - API_SECRET=${API_SECRET}
    # กำหนดว่า service นี้ต้องรอให้ service 'db' อยู่ในสถานะ healthy ก่อนจึงจะเริ่มทำงาน
    depends_on:
      db:
        condition: service_healthy
    # เชื่อมต่อกับ network ชื่อ app-network
    networks:
      - app-network

  # Service ของฐานข้อมูล PostgreSQL
  db:
    # ใช้ image สำเร็จรูปของ PostgreSQL เวอร์ชั่น 15
    image: postgres:15-alpine
    container_name: icrud_db
    restart: unless-stopped
    # กำหนด Environment Variables สำหรับ PostgreSQL
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # กำหนด Volume เพื่อเก็บข้อมูลของ database อย่างถาวร
    # แม้ container จะถูกลบไป ข้อมูลก็ยังคงอยู่
    volumes:
      - db-data:/var/lib/postgresql/data
    # กำหนด Health Check เพื่อตรวจสอบว่า database พร้อมใช้งานหรือไม่ [2]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # เชื่อมต่อกับ network ชื่อ app-network
    networks:
      - app-network

# กำหนด Network ที่จะให้ service ต่างๆ ใช้สื่อสารกัน
networks:
  app-network:
    driver: bridge

# กำหนด Named Volume สำหรับเก็บข้อมูลถาวร
volumes:
  db-data:
    driver: local